Exercises for AI Course
=======================
2010/03/15 First draft of Wolf-Rabbit-Cabbage problem
-----------------------------------------------------
Specify a state representation, operators and goal test to solve the wolf, sheep & 
cabbage problem: 
A man with a boat must carry his wolf, sheep and cabbage to the other side of 
a river.  He can only carry one object at a time.  The wolf will eat the sheep 
and the sheep will eat the cabbage if either is left alone with the potential 
meal.  How can he get all three to the other side? (See 
http://www.plastelina.net/examples/games/game1.html.) 
Specify a heuristic function over the states. Illustrate how a backtracking control 
strategy would use this function in attempting to solve this problem. 

Output
------
macintosh:exercises user$ python wolf_sheep_cabbage.py 
starting_state = []:0
starting_state.dist() = 0
target_state = [0, 1, 2]:1
target_state.dist() = 3
=================================== All nodes
node(1):[]:0  0
node(2):[]:0, [1]:1 dead-end 1
node(3):[]:0, [0, 2]:1  1
node(4):[]:0, [0, 2]:1, [2]:0  2
node(6):[]:0, [0, 2]:1, [2]:0, [1, 2]:1  3
node(7):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0  4
node(8):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1]:1  5
node(10):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1]:1, [0]:0 dead-end 6
node(9):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1, 2]:1 TARGET! 5
node(11):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1, 2]:1, [0, 2]:0 dead-end 6
node(5):[]:0, [0, 2]:1, [0]:0  2
node(12):[]:0, [0, 2]:1, [0]:0, [0, 1]:1  3
node(13):[]:0, [0, 2]:1, [0]:0, [0, 1]:1, [1]:0  4
node(14):[]:0, [0, 2]:1, [0]:0, [0, 1]:1, [1]:0, [1, 2]:1  5
node(16):[]:0, [0, 2]:1, [0]:0, [0, 1]:1, [1]:0, [1, 2]:1, [2]:0 dead-end 6
node(15):[]:0, [0, 2]:1, [0]:0, [0, 1]:1, [1]:0, [0, 1, 2]:1 TARGET! 5
node(17):[]:0, [0, 2]:1, [0]:0, [0, 1]:1, [1]:0, [0, 1, 2]:1, [0, 2]:0 dead-end 6


Working version of A* solution to Wolf-Rabbit-Cabbage
-----------------------------------------------------

Output
------
Macintosh:exercises user$ python wolf_sheep_cabbage_astar.py 
starting_state = []:0
target_state = [0, 1, 2]:1
node =  node(1):[]:0 (0 + 3 = 3)
node =  node(2):[]:0, [1]:1 (1 + 2 = 3)
node =  node(3):[]:0, [0, 2]:1 (1 + 1 = 2)
node =  node(4):[]:0, [0, 2]:1, [2]:0 (2 + 2 = 4)
node =  node(5):[]:0, [0, 2]:1, [0]:0 (2 + 2 = 4)
node =  node(6):[]:0, [0, 2]:1, [2]:0, [1, 2]:1 (3 + 1 = 4)
node =  node(8):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0 (4 + 2 = 6)
node =  node(10):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1, 2]:1 (5 + 3 = 8)
---------------------------------
Solution = node(10):[]:0, [0, 2]:1, [2]:0, [1, 2]:1, [1]:0, [0, 1, 2]:1 (5 + 3 = 8)
